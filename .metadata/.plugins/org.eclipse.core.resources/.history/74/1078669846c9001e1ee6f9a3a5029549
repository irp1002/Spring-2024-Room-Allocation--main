
package edu.sru.group7.roomallocation.controller;

import java.io.IOException;
import java.util.Base64;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import edu.sru.group7.roomallocation.domain.*;

import edu.sru.group7.roomallocation.repositories.*;

@Controller
public class DropdownOptionController {
	
	@Autowired
    private SpaceUseCodeRepository spaceUseCodeRepository;
	
	@Autowired
    private SpaceConditionRepository spaceConditionRepository;

    
	public DropdownOptionController() {
	}

    public DropdownOptionController(SpaceUseCodeRepository spaceUseCodeRepository,
                                    SpaceConditionRepository spaceConditionRepository
                                    ) {
        
        this.spaceUseCodeRepository = spaceUseCodeRepository;
        this.spaceConditionRepository = spaceConditionRepository;
        
    }
    
    
    //Mapping for the /admin URL when initiated through Tomcat
    //lists all the dropdown options for admin to manage
    @RequestMapping({ "/list" })
    public String showDropdownList (Model model) {
        model.addAttribute("spaceUseCodeOptions", spaceUseCodeRepository.findAll());
        model.addAttribute("spaceConditionOptions", spaceConditionRepository.findAll());
		/* model.addAttribute("furnitureOptions", furnitureRepository.findAll()); */
    	return "list";
    }
    
    @GetMapping("/spaceUseCode/add")
    public String addSpaceUseCodeForm(Model model) {
        model.addAttribute("spaceUseCode", new SpaceUseCode());
        return "/spaceUseCode/add";
    }

    @PostMapping("/spaceUseCode/add")
    public String addSpaceUseCode(@ModelAttribute("spaceUseCode") SpaceUseCode spaceUseCode) {
        spaceUseCodeRepository.save(spaceUseCode);
        return "redirect:/list";
    }

    @GetMapping("/spaceUseCode/edit/{id}")
    public String editSpaceUseCodeForm(@PathVariable Integer id, Model model) {
        SpaceUseCode spaceUseCode = spaceUseCodeRepository.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("Invalid SpaceUseCode Id: " + id));

        model.addAttribute("spaceUseCode", spaceUseCode);
        return "/spaceUseCode/edit";
    }

    @PostMapping("/spaceUseCode/edit/{id}")
    public String editSpaceUseCode(@PathVariable Integer id, @ModelAttribute("spaceUseCode") SpaceUseCode spaceUseCode) {
        spaceUseCode.setId(id);
        spaceUseCodeRepository.save(spaceUseCode);
        return "redirect:/list";
    }

    @GetMapping("/spaceUseCode/delete/{id}")
    public String deleteSpaceUseCode(@PathVariable Integer id) {
        spaceUseCodeRepository.deleteById(id);
        return "redirect:/list";
    }
    
    //Crud operations for SpaceCondition
    @GetMapping("/spaceCondition/add")
    public String addSpaceConditionForm(Model model) {
        model.addAttribute("spaceCondition", new SpaceCondition());
        return "/spaceCondition/add";
    }

    @PostMapping("/spaceCondition/add")
    public String addSpaceCondition(@ModelAttribute("spaceCondition") SpaceCondition spaceCondition) {
        spaceConditionRepository.save(spaceCondition);
        return "redirect:/list";
    }

    @GetMapping("/spaceCondition/edit/{id}")
    public String editSpaceConditionForm(@PathVariable Long id, Model model) {
        SpaceCondition spaceCondition = spaceConditionRepository.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("Invalid SpaceCondition Id: " + id));

        model.addAttribute("spaceCondition", spaceCondition);
        return "/spaceCondition/edit";
    }

    @PostMapping("/spaceCondition/edit/{id}")
    public String editSpaceCondition(@PathVariable Integer id, @ModelAttribute("spaceCondition") SpaceCondition spaceCondition) {
        spaceCondition.setId(id);
        spaceConditionRepository.save(spaceCondition);
        return "redirect:/list";
    }

    @GetMapping("/spaceCondition/delete/{id}")
    public String deleteSpaceCondition(@PathVariable Integer id) {
        spaceConditionRepository.deleteById(id);
        return "redirect:/list";
    }
}


package edu.sru.group7.roomallocation.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import edu.sru.group7.roomallocation.domain.ClassRoomITFeatures;
import edu.sru.group7.roomallocation.domain.ComputerLabIT;
import edu.sru.group7.roomallocation.domain.Facilities;
import edu.sru.group7.roomallocation.domain.Rooms;
import edu.sru.group7.roomallocation.domain.StructuralArchitecturalFeatures;

import edu.sru.group7.roomallocation.repositories.ClassRoomITFeaturesRepository;
import edu.sru.group7.roomallocation.repositories.ComputerLabITFeaturesRepository;
import edu.sru.group7.roomallocation.repositories.FacilitiesRepository;
import edu.sru.group7.roomallocation.repositories.RoomsRepository;
import edu.sru.group7.roomallocation.repositories.StructuralArchitecturalFeaturesRepository;

@Controller
public class IndexController {

	@Autowired
	private RoomsRepository roomsRepository;

	@Autowired
	private FacilitiesRepository facilitiesRepository;

	@Autowired
	private ClassRoomITFeaturesRepository classRoomITFeaturesRepository;

	@Autowired
	private StructuralArchitecturalFeaturesRepository structuralArchitecturalFeaturesRepository;

	@Autowired
	private ComputerLabITFeaturesRepository computerLabITFeaturesRepository;
	

	public IndexController() {
	}

	public IndexController(RoomsRepository roomsRepository) {
		this.roomsRepository = roomsRepository;
	}

	public IndexController(FacilitiesRepository facilitiesRepository) {
		this.facilitiesRepository = facilitiesRepository;
	}

	public IndexController(ClassRoomITFeaturesRepository classRoomITFeaturesRepository) {
		this.classRoomITFeaturesRepository = classRoomITFeaturesRepository;
	}

	public IndexController(StructuralArchitecturalFeaturesRepository structuralArchitecturalFeaturesRepository) {
		this.structuralArchitecturalFeaturesRepository = structuralArchitecturalFeaturesRepository;
	}

	public IndexController(ComputerLabITFeaturesRepository computerLabITFeaturesRepository) {
		this.computerLabITFeaturesRepository = computerLabITFeaturesRepository;
	}

	// Mapping for the /index URL when initiated through Tomcat

	@RequestMapping({ "", "/", "/index" })
	public String showRoomList(Model model) {
		model.addAttribute("rooms", roomsRepository.findAll());
		model.addAttribute("facilities", facilitiesRepository.findAll());
		model.addAttribute("structures", structuralArchitecturalFeaturesRepository.findAll());
		model.addAttribute("classrooms", classRoomITFeaturesRepository.findAll());
		model.addAttribute("computerlabs", computerLabITFeaturesRepository.findAll());
		return "index";
	}

	// Mapping for the /signup URL - calls the add-room HTML, to add a room

	@RequestMapping({ "/signup" })
	public String showSignUpForm(Rooms room) {
		 
		return "add-room";
	}
	 

	// Mapping for the /addroom URL - to add a room

	@RequestMapping({ "/addroom" })
	public String addRoom(@Validated Rooms room,  BindingResult result, Model model) {
	    if (result.hasErrors()) {
	        return "add-room";
	    }

	    // Save the room entity
	    roomsRepository.save(room);

	    return "redirect:/index";
	}


	// Mapping for the /edit/room URL to edit a room

	@GetMapping("/edit/{id}")
	public String showUpdateForm(@PathVariable("id") Integer id, Model model) {
		Rooms room = roomsRepository.findById(id)
				.orElseThrow(() -> new IllegalArgumentException("Invalid room Id:" + id));


		model.addAttribute("room", room);

		return "update-room";
	}

	// Mapping for the /update/id URL to update a room

	@PostMapping("/update/{id}")
	public String updateRoom(@PathVariable("id") Integer id, @Validated Rooms room, BindingResult result, Model model) {
		if (result.hasErrors()) {
			room.setId(id);
			return "update-room";
		}
	
		roomsRepository.save(room);

		return "redirect:/index";
	}
	
	@PostMapping("/update/{id}")
	public String updateFacilities(@PathVariable("id") Integer id, @Validated Facilities facilities, BindingResult result, Model model) {
		if (result.hasErrors()) {
			facilities.setId(id);
			return "update-room";
		}
	
		facilitiesRepository.save(facilities);

		return "redirect:/index";
	}

	// Mapping for the /delete/id URL to delete a room

	@GetMapping("/delete/{id}")
	public String deleteRoom(@PathVariable("id") Integer id, Model model) {
		Rooms room = roomsRepository.findById(id)
				.orElseThrow(() -> new IllegalArgumentException("Invalid room Id:" + id));

		Facilities facilities = facilitiesRepository.findByRoom_Id(room.getId());
		StructuralArchitecturalFeatures structures = structuralArchitecturalFeaturesRepository.findByRoom_Id(room.getId());
		ClassRoomITFeatures classroom = classRoomITFeaturesRepository.findByRoom_Id(room.getId());
		ComputerLabIT computerlab = computerLabITFeaturesRepository.findByRoom_Id(room.getId());

		facilitiesRepository.delete(facilities);
		structuralArchitecturalFeaturesRepository.delete(structures);
		classRoomITFeaturesRepository.delete(classroom);
		computerLabITFeaturesRepository.delete(computerlab);
		roomsRepository.delete(room);

		return "redirect:/index";
	}

}

